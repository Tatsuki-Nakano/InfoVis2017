function main()
{
    var width = 500;
    var height = 500;

    var scene = new THREE.Scene();

    var fov = 45;
    var aspect = width / height;
    var near = 1;
    var far = 1000;
    var camera = new THREE.PerspectiveCamera( fov, aspect, near, far );
    camera.position.set( 0, 0, 7 );
    scene.add( camera );

    var renderer = new THREE.WebGLRenderer();
    renderer.setSize( width, height );
    document.body.appendChild( renderer.domElement );

    var vertices = [
	[-1,-1, 0],//v0
	[-1,-1, 2],//v1
	[-1, 1, 0],//v2
	[ 1,-1, 0],//v3
	[ 1, 1, 2],//v4
	[ 1, 1, 0],//v5
	[ 1,-1, 2],//v6
	[-1, 1, 2],//v7
    ];

    var faces = [
	[0,2,1],//f0: v0-v1-v2
	[0,2,1],//f1: v0-v1-v
	[0,2,1],//f2: v0-v1-v
	[0,1,2],//f3: v0-v1-v
	[0,1,2],//f4: v0-v1-v
	[0,1,2],//f5: v0-v1-v
	[0,1,2],//f6: v0-v1-v
	[0,1,2],//f7: v0-v1-v
	[0,1,2],//f8: v0-v1-v
	[0,2,1],//f9: v0-v1-v
	[0,2,1],//f10:v0-v1-v
	[0,2,1] //f11:v0-v1-v
    ];

    var v = [];
    
    for(i=0;i<8;i++)
	v.push( new THREE.Vector3().fromArray( vertices[i] ));

    var f = [];

    for(i=0;i<12;i++){
	var id = faces[i];
	f.push( new THREE.Face3( id[0], id[1], id[2] ));
    }

    var geometry = [];
    for(i=0;i<12;i++){
	geometry.push( new THREE.Geometry() );
    }

    geometry[0].vertices.push( v[0] );
    geometry[0].vertices.push( v[1] );
    geometry[0].vertices.push( v[2] );
    geometry[0].faces.push( f[0] );
    
    geometry[1].vertices.push( v[0] );
    geometry[1].vertices.push( v[2] );
    geometry[1].vertices.push( v[3] );
    geometry[1].faces.push( f[1] );

    geometry[2].vertices.push( v[0] );
    geometry[2].vertices.push( v[3] );
    geometry[2].vertices.push( v[1] );
    geometry[2].faces.push( f[2] );

    geometry[3].vertices.push( v[7] );
    geometry[3].vertices.push( v[1] );
    geometry[3].vertices.push( v[2] );
    geometry[3].faces.push( f[3] );

    geometry[4].vertices.push( v[5] );
    geometry[4].vertices.push( v[2] );
    geometry[4].vertices.push( v[3] );
    geometry[4].faces.push( f[4] );

    geometry[5].vertices.push( v[6] );
    geometry[5].vertices.push( v[3] );
    geometry[5].vertices.push( v[1] );
    geometry[5].faces.push( f[5] );

    geometry[6].vertices.push( v[4] );
    geometry[6].vertices.push( v[5] );
    geometry[6].vertices.push( v[6] );
    geometry[6].faces.push( f[6] );

    geometry[7].vertices.push( v[4] );
    geometry[7].vertices.push( v[6] );
    geometry[7].vertices.push( v[7] );
    geometry[7].faces.push( f[7] );

    geometry[8].vertices.push( v[4] );
    geometry[8].vertices.push( v[7] );
    geometry[8].vertices.push( v[5] );
    geometry[8].faces.push( f[8] );

    geometry[9].vertices.push( v[3] );
    geometry[9].vertices.push( v[5] );
    geometry[9].vertices.push( v[6] );
    geometry[9].faces.push( f[9] );

    geometry[10].vertices.push( v[1] );
    geometry[10].vertices.push( v[6] );
    geometry[10].vertices.push( v[7] );
    geometry[10].faces.push( f[10] );

    geometry[11].vertices.push( v[2] );
    geometry[11].vertices.push( v[7] );
    geometry[11].vertices.push( v[5] );
    geometry[11].faces.push( f[11] );

    var material = new THREE.MeshBasicMaterial();
    //var material = new THREE.MeshLambertMaterial( { color: 0xffffff } );
    //var cube = new THREE.Mesh( geometry, material );
    //scene.add( cube );
    material.vertexColors = THREE.FaceColors;
    for(i=0;i<12;i++)
	geometry[i].faces[0].color = new THREE.Color( 1, 0, 0 );

    var material = new THREE.MeshBasicMaterial();
    material.vertexColors = THREE.VertexColors;

    for(i=0;i<12;i++){
	geometry[i].faces[0].vertexColors.push(new THREE.Color(1,0,0));
	geometry[i].faces[0].vertexColors.push(new THREE.Color(0,1,0));
	geometry[i].faces[0].vertexColors.push(new THREE.Color(0,0,1));
    }
    var triangle = [];
    for(i=0;i<12;i++){
	triangle.push( new THREE.Mesh( geometry[i], material ));
	scene.add( triangle[i] );
    }
    
    var light = new THREE.PointLight( 0xffffff );
    light.position.set(1,1,1);
    scene.add(light);
    
    material.side = THREE.DoubleSide;

    document.addEventListener( 'mousedown', mouse_down_event );

    loop();

    function loop()
    {
        requestAnimationFrame( loop );
	for(i=0;i<12;i++){
	    triangle[i].rotation.x += 0.003;
	    triangle[i].rotation.y += 0.003;
	}
        renderer.render( scene, camera );
    }

    function mouse_down_event( event )
    {
	var raycaster = THREE.Raycaster( origin, direction );
	var intersects = raycaster.intersectObject( triangle );
	if ( intersects.length > 0 )
	    {
		intersects[0].face.color.setRGB( 1, 0, 0 );
		intersects[0].object.geometry.colorsNeedUpdate = true;
	    }
	var x_win = event.clientX;
	var y_win = event.clientY;

	var vx = renderer.domElement.offsetLeft;
	var vy = renderer.domElement.offsetTop;
	var vw = renderer.domElement.width;
	var vh = renderer.domElement.height;

	var x_NDC = 2 * ( x_win - vx ) / vw - 1;
	var y_NDC = -( 2 * ( y_win - vy ) / vh - 1 );

	var p_NDC = new THREE.Vector3( x_NDC, y_NDC, 1 );
	var p_wid = p_NDC.unproject( camera );
    }

}
